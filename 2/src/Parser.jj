// Grammar
//	Exp		-> Exp "&&" LtLevel
// 	Exp		-> LtLevel
//	LtLevel		-> LtLevel "<" PlusLevel
//	LtLevel		-> PlusLevel
//	PlusLevel	-> PlusLevel ("+" | "-") MultLevel
//	PlusLevel	-> MultLevel
//	MultLevel	-> MultLevel "*" DotLevel
//	MultLevel	-> DotLevel
//	DotLevel	-> DotLevel ("[" | "]" | "." | "!" | "(" | ")") PrimaryExp
//	DotLevel	-> PrimaryExp
//	PrimaryExp	-> other

// Expression  ->  Expression ( "&&" | "<" | "+" | "-" | "*" ) Expression
//	| 	Expression "[" Expression "]"
//	| 	Expression "." "length"
//	| 	Expression "." Identifier "(" ( Expression ( "," Expression )* )? ")"
//	| 	<INTEGER_LITERAL>
//	| 	"true"
//	| 	"false"
//	| 	Identifier
//	| 	"this"
//	| 	"new" "int" "[" Expression "]"
//	| 	"new" Identifier "(" ")"
//	| 	"!" Expression
//	| 	"(" Expression ")"

options {
  STATIC = false;
}    

PARSER_BEGIN(Parser)
public class Parser {
  public static void main(String[] args) {
   try{   
      Parser pars = new Parser(System.in);
     // pars.printTokenInfo(pars);
      pars.printCode(pars);
      pars.Goal();
    }
    catch(ParseException e){
      System.err.println("SyntaxError: " + e.getMessage());	
    }
    catch(TokenMgrError e) {
      System.err.println("TokenMgrError: " + e.getMessage());
    }
  }

  private static void printCode(Parser pars) {
    System.out.println("todo");	
  }

  private static void printTokenInfo(Parser pars) {
    Token t;
    for(t = pars.getNextToken(); t.kind != 0; t = pars.getNextToken()) {
      System.out.print(t.kind+" ");
    }
    System.out.print(t.kind);
    System.out.println();
  }
}
PARSER_END(Parser)


TOKEN: {
  <LBRACE:    "{"> |//1
  <RBRACE:    "}"> |//2
  <LBRACK:    "["> |//3
  <RBRACK:    "]"> |//4
  <LPAREN:    "("> |//5
  <RPAREN:    ")"> |//6
  <COMMA:     ","> |//7
  <SEMI:      ";"> |//8
  <DOT:       "."> |//9
  <EXCLAM:    "!"> |//10
  <ASSIGN:    "="> |//11
  <AND:       "&&"> |//12
  <PLUS:      "+"> |//13
  <MINUS:     "-"> |//14
  <TIMES:     "*"> |//15
  <LT:        "<"> |//16
  <IF:        "if"> |//17
  <INT:       "int"> |//18 
  <NEW:       "new"> |//19
  <ELSE:      "else"> |//20
  <MAIN:      "main"> |//21
  <THIS:      "this"> |//22
  <TRUE:      "true"> |//23
  <VOID:      "void"> |//24
  <CLASS:     "class"> |//25
  <FALSE:     "false"> |//26
  <WHILE:     "while"> |//27
  <LENGTH:    "length"> |//28
  <PUBLIC:    "public"> |//29
  <RETURN:    "return"> |//30
  <STAT:      "static"> |//31
  <STRING:    "String"> |//32
  <BOOLEAN:   "boolean"> |//33
  <EXTENDS:   "extends"> |//34
  <SYSOPRNTL: "System.out.println"> |//35 
  <ID:        ["A"-"Z","a"-"z"](["A"-"Z","a"-"z"]|["0"-"9"]|"_")*> |//36
  <NUM:       (["0"-"9"])+> //37
}


SKIP: { " " | "\t" | "\n" | "\r" | "\r\n" | 
        <"//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")> }

void Goal():
{} 
{ <CLASS> <ID> MainClass() ( <CLASS> <ID> RegClass() )* <EOF> }

//(<LBRACE> | <RBRACE> | <LBRACK> | <RBRACK> | <LPAREN> | 
//   <RPAREN> | <COMMA> | <SEMI> | <DOT> | <EXCLAM> | <ASSIGN> | <AND> | 
//   <PLUS> | <MINUS> | <TIMES> | <LT> | <IF> | <INT> | <NEW> | <ELSE> | 
//   <MAIN> | <THIS> | <TRUE> | <VOID> | <CLASS> | <FALSE> | <WHILE> | 
//   <LENGTH> | <PUBLIC> | <RETURN> | <STAT> | <STRING> | <BOOLEAN> | 
//   <EXTENDS> | <SYSOPRNTL> | <ID> | <NUM>)* }

void MainClass() :
{}
{ <LBRACE> <PUBLIC> <STAT> <VOID> <MAIN> 
  <LPAREN> <STRING> <LBRACK> <RBRACK> <ID> <RPAREN> 
  <LBRACE> [ Statement() ] <RBRACE> <RBRACE>}

void RegClass() :
{}
{ [ <EXTENDS> <ID> ] <LBRACE> ( VarDecl() )* ( MethodDecl() )* <RBRACE> }

void VarDecl() :
{}
{ Type() <ID> <SEMI> }

void MethodDecl() :
{}
{ <PUBLIC> Type() <ID> 
  <LPAREN> [ Type() <ID> ( <COMMA> Type() <ID> )* ] <RPAREN> 
  <LBRACE> ( LOOKAHEAD(2) VarDecl() )* ( Statement() )* <RETURN> Exp() <SEMI> <RBRACE> }

void Type() :
{}
{ <INT> [ IntTypePostfix() ] | 
  <BOOLEAN> |
  <ID> }

void IntTypePostfix() :
{}
{ <LBRACK> <RBRACK> }

void Statement() :
{}
{ <LBRACE> ( Statement() )* <RBRACE> |
  <IF> <LPAREN> Exp() <RPAREN> Statement() [ LOOKAHEAD(1) ElseStatement() ] |
  <WHILE> <LPAREN> Exp() <RPAREN> Statement() |
  <SYSOPRNTL> <LPAREN> Exp() <RPAREN> <SEMI> |
  <ID> AssignStatement() }

void ElseStatement() :
{}
{ <ELSE> Statement() }

void AssignStatement() :
{}
{ <ASSIGN> Exp() <SEMI> |
  <LBRACK> Exp() <RBRACK> <ASSIGN> Exp() <SEMI> }

void Exp() :
{}
{ LtLevel() Expp() }

void Expp() :
{}
{ [ <AND> LtLevel() Expp() ] }

void LtLevel() :
{}
{ PlusLevel() LtLevelp() }

void LtLevelp() :
{}
{ [ <LT> PlusLevel() LtLevelp() ] }

void PlusLevel() :
{}
{ MultLevel() PlusLevelp() }

void PlusLevelp() :
{}
{ [ ( <PLUS> | <MINUS> ) MultLevel() PlusLevelp() ] }

void MultLevel() :
{}
{ DotLevel() MultLevelp() }

void MultLevelp() :
{}
{ [ <TIMES> DotLevel() MultLevelp() ] }

void DotLevel() :
{}
{ <EXCLAM> DotLevel() | 
  PrimaryExp() ( <LBRACK> Exp() <RBRACK> |
		LOOKAHEAD(2) <DOT> <LENGTH> |
		LOOKAHEAD(2) <DOT> <ID> <LPAREN> [ Exp() ( <COMMA> Exp() )* ] <RPAREN> )* }

void PrimaryExp() :
{}
{ <TRUE> |
  <FALSE> |
  <THIS> |
  <NEW> NewExp() |
  <LPAREN> Exp() <RPAREN> |
  <ID> |
  <NUM>}

void NewExp() :
{}
{ <INT> <LBRACK> Exp() <RBRACK> |
  <ID> <LPAREN> <RPAREN> }

