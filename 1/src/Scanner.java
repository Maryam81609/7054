/* Generated By:JavaCC: Do not edit this line. Scanner.java */
public class Scanner implements ScannerConstants {
  public static void main(String[] args) {
   try{
      Scanner scan = new Scanner(System.in);
      scan.printTokenInfo(scan);
      scan.Goal();
    }
    catch(ParseException e){}
    catch(TokenMgrError e) {
      System.err.println("TokenMgrError: " + e.getMessage());
    }
  }

  private static void printTokenInfo(Scanner scan) {
    Token t;
    for(t = scan.getNextToken(); t.kind != 0; t = scan.getNextToken()) {
      System.out.print(t.kind+" ");
    }
    System.out.print(t.kind);
    System.out.println();
  }

  final public void Goal() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
      case RBRACE:
      case LBRACK:
      case RBRACK:
      case LPAREN:
      case RPAREN:
      case COMMA:
      case SEMI:
      case DOT:
      case EXCLAM:
      case ASSIGN:
      case AND:
      case PLUS:
      case MINUS:
      case TIMES:
      case LT:
      case IF:
      case INT:
      case NEW:
      case ELSE:
      case MAIN:
      case THIS:
      case TRUE:
      case VOID:
      case CLASS:
      case FALSE:
      case WHILE:
      case LENGTH:
      case PUBLIC:
      case RETURN:
      case STAT:
      case STRING:
      case BOOLEAN:
      case EXTENDS:
      case SYSOPRNTL:
      case ID:
      case NUM:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
        jj_consume_token(LBRACE);
        break;
      case RBRACE:
        jj_consume_token(RBRACE);
        break;
      case LBRACK:
        jj_consume_token(LBRACK);
        break;
      case RBRACK:
        jj_consume_token(RBRACK);
        break;
      case LPAREN:
        jj_consume_token(LPAREN);
        break;
      case RPAREN:
        jj_consume_token(RPAREN);
        break;
      case COMMA:
        jj_consume_token(COMMA);
        break;
      case SEMI:
        jj_consume_token(SEMI);
        break;
      case DOT:
        jj_consume_token(DOT);
        break;
      case EXCLAM:
        jj_consume_token(EXCLAM);
        break;
      case ASSIGN:
        jj_consume_token(ASSIGN);
        break;
      case AND:
        jj_consume_token(AND);
        break;
      case PLUS:
        jj_consume_token(PLUS);
        break;
      case MINUS:
        jj_consume_token(MINUS);
        break;
      case TIMES:
        jj_consume_token(TIMES);
        break;
      case LT:
        jj_consume_token(LT);
        break;
      case IF:
        jj_consume_token(IF);
        break;
      case INT:
        jj_consume_token(INT);
        break;
      case NEW:
        jj_consume_token(NEW);
        break;
      case ELSE:
        jj_consume_token(ELSE);
        break;
      case MAIN:
        jj_consume_token(MAIN);
        break;
      case THIS:
        jj_consume_token(THIS);
        break;
      case TRUE:
        jj_consume_token(TRUE);
        break;
      case VOID:
        jj_consume_token(VOID);
        break;
      case CLASS:
        jj_consume_token(CLASS);
        break;
      case FALSE:
        jj_consume_token(FALSE);
        break;
      case WHILE:
        jj_consume_token(WHILE);
        break;
      case LENGTH:
        jj_consume_token(LENGTH);
        break;
      case PUBLIC:
        jj_consume_token(PUBLIC);
        break;
      case RETURN:
        jj_consume_token(RETURN);
        break;
      case STAT:
        jj_consume_token(STAT);
        break;
      case STRING:
        jj_consume_token(STRING);
        break;
      case BOOLEAN:
        jj_consume_token(BOOLEAN);
        break;
      case EXTENDS:
        jj_consume_token(EXTENDS);
        break;
      case SYSOPRNTL:
        jj_consume_token(SYSOPRNTL);
        break;
      case ID:
        jj_consume_token(ID);
        break;
      case NUM:
        jj_consume_token(NUM);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  public ScannerTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[2];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_0();
      jj_la1_1();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0xfffffffe,0xfffffffe,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x3f,0x3f,};
   }

  public Scanner(java.io.InputStream stream) {
     this(stream, null);
  }
  public Scanner(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ScannerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  public Scanner(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ScannerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  public Scanner(ScannerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  public void ReInit(ScannerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[44];
    for (int i = 0; i < 44; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 2; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 44; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

}
